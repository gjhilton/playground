Session Notes: TextScrapView Paper Texture App

Project Goal:

Create an app UI that allows users to add multiple "text scraps" — pieces of text displayed on a textured, paper-like background — stacked vertically inside a scrollable view, with a button fixed at the bottom to add new scraps. Each scrap:
- Is a custom TextScrapView combining SwiftUI and UIKit (UIViewRepresentable wrapping a UITextView and a custom PaperTextureView).
- Has an immutable, calculated height based on its text content.
- Displays a unique index number prefix (incrementing count) prepended to its text.
- Is visually styled with a paper-like textured background, including random tear edges, stains, flecks, creases, and coffee rings.

What We Have Done So Far:

1. TextScrapView:
   - Implemented as a UIViewRepresentable wrapping:
     - UITextView for displaying text (non-editable, no scrolling inside the scrap itself).
     - PaperTextureView for background texture with shadows.
   - Fixed height calculated on initialization by sizing the text content, adding padding.
   - Immutable once created to avoid flicker/redraw issues.
   - Text is black, padded, and uses a clear background so paper texture shows through.
   - Background drawing in PaperTextureView is done once per scrap, using random values per instance to create natural variation.
   - Paper texture effects (tears, stains, spots, flecks, creases) are randomized within configurable ranges for natural look.

2. PaperTextureView:
   - A custom UIView subclass overriding draw(_:) to render the paper texture.
   - Uses random values for:
     - Number of dirt fleck clusters, organic stains, coffee rings, creases, spots, etc., each within a floor/ceil range.
   - Stains alpha range reduced to be fainter on request.
   - Tear edges randomly torn or straight, with a smooth clipping path.
   - Shadows and shading applied for realistic depth.

3. ContentView (SwiftUI):
   - Vertical ScrollView containing a VStack of TextScrapViews.
   - A bottom fixed button to add a new scrap.
   - When adding a scrap:
     - Generate random excerpt from Lorem Ipsum with unique count prefix.
     - Append the new scrap to the array.
     - Scroll so the first line of the new scrap is roughly halfway up the visible screen.
   - Background is white.
   - Button is fixed in its own space below the scrollable scraps, no overlap.

Open / Next Steps / Reminders:

- Ensure TextScrapView fully calculates its intrinsic height on init from text content to avoid dynamic resizing/flicker.
- Confirm PaperTextureView only draws once per instance; no unnecessary redraws.
- Maintain efficient scrolling to newly added scrap (scroll offset calculations correct).
- Confirm all randomness for texture effects is per-instance and stable after creation.
- Possible next: add editing, drag & drop scraps, or exporting functionality.
- Always provide full files on code sharing.
- Keep UI clean: no overlapping button and scraps, consistent padding.
- Keep alpha and random ranges configurable for tuning visuals.
- Maintain clear separation of concerns (ContentView handles layout and data, TextScrapView handles rendering, PaperTextureView handles background drawing).
- Test performance and UI responsiveness with many scraps.

